#define F_CPU 1000000UL // Define frequency for delay and UART timing

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/eeprom.h>
#include <stdio.h>

#define BUT1        0x04
#define BUT2        0x08
#define LONG_PRESS  300
#define RED         0x80
#define GREEN       0x20
#define BLUE        0x10
#define DIGITS      4

#define BAUD        4800UL
#define UBRR_value  ((F_CPU / (16 * BAUD)) - 1)

int digits[DIGITS] = {0};

int mode = 0;
int timerr = 0;

int debounce1 = 0;
int debounce2 = 0;
int ignr_d = 0;
int long_press = 1;

uint8_t EEMEM save_hours;
uint8_t EEMEM save_minutes;


typedef struct {
	int hours;
	int minutes;
	int dp;
	int time_changed;
} Clock;


typedef struct {
	int blink_count;
	int blinking_enable;
} Blinking;


typedef struct {
	int sec_t;
	int min_t;
} Timer;


Clock clk = {0};
Blinking blnk = {0};
Timer tmr = {0};


void Button_Init(void) {
	// Configure external interrupts INT0 and INT1
	MCUCR |= (1 << ISC01);
    MCUCR |= (1 << ISC11);
    GICR |= (1 << INT0) | (1 << INT1);
}


void Timer_Counter_2_Init(void) {
	// Initialize Timer2 in CTC mode for multiplexing display
	TCCR2 = (1 << WGM21) | (1 << CS22) | (1 << CS21); //prescaler 256
    OCR2 = 12;
    TIMSK |= (1 << OCIE2);
}


void Timer_Counter_1_Init(void) {
	// Initialize Timer1 in CTC mode to handle clock and timer logic every 1ms
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
    OCR1A = 14;
    TIMSK |= (1 << OCIE1A);
}


void UART_Init(void) {
	// Initialize UART with 4800 baud rate
    UBRRL = UBRR_value;
    UBRRH = (UBRR_value >> 8);
    UCSRB = (1 << TXEN) | (1 << RXEN);
    UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
}


void UART_send(unsigned char value) {
	// Send a single character via UART
    while (!(UCSRA & (1 << UDRE)));
    UDR = value;
}


void UART_send_str(unsigned char *str) {
	// Send a null-terminated string via UART
    while (*str != '\0') {
        UART_send(*str);
        str++;
    }
}


void time2eeprom(void) {
	// Save current time (hours and minutes) to EEPROM
    eeprom_update_byte(&save_hours, (uint8_t)clk.hours);
    eeprom_update_byte(&save_minutes, (uint8_t)clk.minutes);
}


void timefreeprom(void) {
	// Load time from EEPROM
    clk.hours = eeprom_read_byte(&save_hours);
    clk.minutes = eeprom_read_byte(&save_minutes);

    if (clk.hours > 23) clk.hours = 0;
    if (clk.minutes > 59) clk.minutes = 0;
}


void dec2digit(int dec) {
	// Convert digit (0â€“9) to 7-segment code and output to PORTC
    switch (dec) {
        case 0: PORTC = 0b01011111; break;
        case 1: PORTC = 0b00000110; break;
        case 2: PORTC = 0b00111011; break;
        case 3: PORTC = 0b00101111; break;
        case 4: PORTC = 0b01100110; break;
        case 5: PORTC = 0b01101101; break;
        case 6: PORTC = 0b01111101; break;
        case 7: PORTC = 0b00000111; break;
        case 8: PORTC = 0b01111111; break;
        case 9: PORTC = 0b01101111; break;
        default: PORTC = 0b00000000;
    }
}


void update_digits() {
	// Update digits array depending on current mode (clock or timer)
    if (mode == 3) {
        digits[0] = tmr.min_t / 10;
        digits[1] = tmr.min_t % 10;
        digits[2] = tmr.sec_t / 10;
        digits[3] = tmr.sec_t % 10;
    } else {
        digits[0] = clk.hours / 10;
        digits[1] = clk.hours % 10;
        digits[2] = clk.minutes / 10;
        digits[3] = clk.minutes % 10;
    }
}


void update_leds() {
	// Update LED indicators based on current mode
    if (mode == 0) {
		PORTD = RED; // RED - normal clock mode
		blnk.blinking_enable = 1;
	} else if (mode == 1) {
		PORTD = BLUE; // BLUE - hour set mode
		clk.dp = 1;
		clk.time_changed = 0;
		blnk.blinking_enable = 0;
	} else if (mode == 2) {
		PORTD = GREEN; // GREEN - minute set mode
		clk.dp = 1;
		clk.time_changed = 0;
		blnk.blinking_enable = 0;
    } else if (mode == 3) {
        if (timerr) {
			PORTD = RED | BLUE; // RED + BLUE - timer running
			blnk.blinking_enable = 0;
		} else {
			PORTD = RED | GREEN; // RED + GREEN - timer setup
			clk.dp = 1;
		}		
    }
}


void handle_short_press(int button) {
	// Handle short press of button 1 or 2 depending on current mode:
    // In clock set mode: adjust hours/minutes
    // In timer mode: increment/decrement timer values
    if (button == 1) {
		
        if (mode == 1 && !ignr_d) {
            clk.hours = (clk.hours + 1) % 24;
			
        } else if (mode == 2) {
            clk.minutes = (clk.minutes + 1) % 60;
			
        } else if (mode == 3 && !timerr) {
            tmr.sec_t++;
            if (tmr.sec_t > 59) {
                tmr.sec_t = 0;
                tmr.min_t++;
                if (tmr.min_t > 59) tmr.min_t = 0;
            }
        }
			blnk.blink_count = 0; 
		
		
    } else if (button == 2) {
        if (mode == 1) {
            clk.hours = (clk.hours == 0) ? 23 : clk.hours - 1;
			
        } else if (mode == 2) {
            clk.minutes = (clk.minutes == 0) ? 59 : clk.minutes - 1;
			
        } else if (mode == 3 && !timerr && !ignr_d) {
            if (tmr.min_t <= 0 && tmr.sec_t <= 0) {
                tmr.sec_t = 0; 
				tmr.min_t = 0;
				
            } else if (tmr.sec_t == 0 && tmr.min_t > 0) {
                tmr.min_t--; tmr.sec_t = 59;
				
            } else {
                tmr.sec_t--;
            }
        }
			blnk.blink_count = 0; 
			
		
    }
}

void handle_long_press(int button) {
	// Handle long button press:
    // Button 0: switch between clock and timer modes
    // Button 1: switch between hour/minute set modes
    // Button 2: start/stop/reset timer
    if (button == 0) {
        mode = (mode != 3) ? 3 : 0;
		
        update_leds();
        long_press = 0;
        ignr_d = 1;
		
    } else if (button == 1 && !(mode == 3)) {
        mode = (mode + 1) % 3;
		
		update_leds();
 		blnk.blink_count = 0;
        long_press = 0;
        ignr_d = 1;
		
    } else if (button == 1 && mode == 3 && !timerr) {
		
        tmr.sec_t++;
        if (tmr.sec_t > 59) {
            tmr.sec_t = 0;
            tmr.min_t++;
            if (tmr.min_t > 59) {
                tmr.min_t = 0;
                tmr.sec_t = 0;
            }
        }
		
        long_press = 1;
        ignr_d = 1;
		
    } else if (button == 2 && mode == 3) {
		if (blnk.blinking_enable == 2) {
			blnk.blinking_enable = 0;
			timerr = 0;
			blnk.blink_count = 0;
			update_leds();
		} else {
			if (tmr.min_t != 0 || tmr.sec_t != 0) {
				timerr = !timerr;
			}		
		update_leds();
		}		
		
        long_press = 0;
        ignr_d = 1;
		
    }
}


void led_blinking_handler() {
	// Handle LED blinking effects based on state
    // Mode 1 blinking: show number of hours in green/blue pulses
    // Mode 2 blinking: when timer ends
	static ms_blink = 0;
	
	ms_blink++;
	if (ms_blink >= 500) {
		ms_blink = 0;

		if (blnk.blinking_enable == 1 && clk.time_changed) {
			int max_blinks = ((clk.hours == 0) ? 24 : clk.hours) * 2;

			if (blnk.blink_count < max_blinks) {
				if (blnk.blink_count % 2 == 0)
					PORTD |= GREEN | BLUE;
				else
					update_leds();
				blnk.blink_count++;
			} else {
			blnk.blinking_enable = 0;
			}
			
		} else if (blnk.blinking_enable == 2) {
			if (blnk.blink_count % 2 == 0)
				PORTD |= BLUE;
			else
				PORTD &= ~BLUE;
				blnk.blink_count++;
		}
	}
}

ISR(TIMER2_COMP_vect) {
	// Multiplexing display digits
    // Handle short press timing
    // Detect long press by measuring time button is held
    static int cntr = 0;
    static int count = 0;

    PORTC = 0x00;
    PORTA = 0x00;
    dec2digit(digits[cntr]);

    if (cntr == 1 && clk.dp) PORTC |= 0x80;

    PORTA |= (1 << (cntr + 4));
    cntr = (cntr + 1) % 4;

    if (debounce1 > 0) {
        debounce1--;
        if (debounce1 == 0) handle_short_press(1);
    }

    if (debounce2 > 0) {
        debounce2--;
        if (debounce2 == 0) handle_short_press(2);
    }


    if ((PIND & BUT1) && (PIND & BUT2)) {
        count++;
        if (count >= LONG_PRESS && long_press) handle_long_press(0);
		
    } else if ((PIND & BUT1) && !(PIND & BUT2)) {
        count++;
        if (count >= LONG_PRESS && long_press) handle_long_press(1);
		
    } else if (!(PIND & BUT1) && (PIND & BUT2)) {
        count++;
        if (count >= LONG_PRESS && long_press) handle_long_press(2);
		
    } else {
        count = 0;
        long_press = 1;
        ignr_d = 0;
    }
}

ISR(TIMER1_COMPA_vect) {
	// Update clock every millisecond
    // Update timer countdown when running
    // Handle LED blinking effects
    // Transmit current time via UART
	static int seconds = 0;
    static int milliseconds = 0;
	static int ms = 0;

    if (milliseconds % 500 == 0)
		if (mode == 0) {
			clk.dp = !clk.dp;
		}

    if (mode != 1 && mode != 2) {
		milliseconds++;
		
        if (milliseconds >= 1000) {
			milliseconds = 0;
            seconds++;
			
            if (seconds >= 60) {
                seconds = 0;
                clk.minutes++;
				
                if (clk.minutes >= 60) {
                    clk.minutes = 0;
                    clk.hours++;
					
                    if (clk.hours >= 24) clk.hours = 0;
						
                     clk.time_changed = 1;
                     
                }

                time2eeprom();

                char time_str[20];
                sprintf(time_str, "Time: %02d:%02d:%02d\r\n", clk.hours, clk.minutes, seconds);
                UART_send_str((unsigned char *)time_str);
            }
        }


		if (timerr) {
			ms++;
			if (ms >= 1000) {
				ms = 0;
				if (tmr.sec_t == 0 && tmr.min_t == 0) {
					blnk.blinking_enable = 2;
				} else if (tmr.sec_t == 0 && tmr.min_t > 0) {
					tmr.min_t--;
					tmr.sec_t = 59;
				} else {
					tmr.sec_t--;
				}
			}
		}	
	} 
    led_blinking_handler();
}

ISR(INT0_vect) {
	// Start debounce
    if (!ignr_d) debounce1 = 52;
}

ISR(INT1_vect) {
	// Start debounce
    if (!ignr_d) debounce2 = 52;
}

int main(void) {
	// Initialize all components
    // Load time from EEPROM
    // Enable global interrupts
    // Main loop only updates digits to be displayed
    DDRC = 0xFF;
    DDRA = 0xF0;
    DDRD = 0xB0;
	
	update_leds();
	
	Button_Init();
	
	Timer_Counter_2_Init();
	
	Timer_Counter_1_Init();
	
    UART_Init();

    timefreeprom();
	
    sei();

    while (1) {
        update_digits();
    }
}
